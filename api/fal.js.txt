 apifal.js
const axios = require('axios');

module.exports = async function handler(req, res) {
   Enable CORS
  res.setHeader('Access-Control-Allow-Credentials', true);
  res.setHeader('Access-Control-Allow-Origin', '');
  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'X-CSRF-Token, X-Requested-With, Accept, Accept-Version, Content-Length, Content-MD5, Content-Type, Date, X-Api-Version, Authorization');
  
   Handle OPTIONS request (pre-flight)
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

   Only allow POST requests
  if (req.method !== 'POST') {
    return res.status(405).json({ error 'Method not allowed' });
  }

  try {
    const { images, apiKey } = req.body;
    
    if (!apiKey) {
      return res.status(400).json({ error 'API key is required' });
    }
    
    if (images.length  2) {
      return res.status(400).json({ error 'At least 2 images are required' });
    }
    
    console.log(`Proxying request to FAL.ai with ${images.length} images`);
    
     FAL.ai API endpoint
    const falEndpoint = 'httpsapi.fal.aimodelsfal-aividustart-end-to-video';
    
     First and last image from the array
    const startImage = images[0];
    const finalImage = images[images.length - 1];
    
    const payload = {
      start_image startImage,
      final_image finalImage,
      prompt Show a natural transition between these images,
      video_length 5
    };
    
    const headers = {
      'Content-Type' 'applicationjson',
      'Authorization' `Key ${apiKey}`,
      'Accept' 'applicationjson'
    };
    
    const response = await axios.post(falEndpoint, payload, { 
      headers,
      timeout 180000,  3 minute timeout
    });
    
    if (response.data && response.data.video_url) {
      return res.status(200).json({ 
        output { 
          video response.data.video_url 
        } 
      });
    } else {
      console.error('Invalid response structure', response.data);
      return res.status(500).json({
        error true,
        message 'Invalid response structure from FAL.ai API'
      });
    }
  } catch (error) {
    console.error('Error in proxy request', error.message);
    
    return res.status(500).json({
      error true,
      message error.message  'Error connecting to FAL.ai API'
    });
  }
}